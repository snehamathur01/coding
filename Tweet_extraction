{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled17.ipynb",
      "version": "0.3.2",
      "provenance": [],
      "collapsed_sections": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/snehamathur01/coding/blob/master/Tweet_extraction\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "h5i5jmVCLS_Y",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 199
        },
        "outputId": "7f1c48d9-c489-41ca-a87d-1b0d97f8b42b"
      },
      "source": [
        "!pip3 install tweepy"
      ],
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Requirement already satisfied: tweepy in /usr/local/lib/python3.6/dist-packages (3.6.0)\n",
            "Requirement already satisfied: requests-oauthlib>=0.7.0 in /usr/local/lib/python3.6/dist-packages (from tweepy) (1.2.0)\n",
            "Requirement already satisfied: requests>=2.11.1 in /usr/local/lib/python3.6/dist-packages (from tweepy) (2.21.0)\n",
            "Requirement already satisfied: PySocks>=1.5.7 in /usr/local/lib/python3.6/dist-packages (from tweepy) (1.7.0)\n",
            "Requirement already satisfied: six>=1.10.0 in /usr/local/lib/python3.6/dist-packages (from tweepy) (1.12.0)\n",
            "Requirement already satisfied: oauthlib>=3.0.0 in /usr/local/lib/python3.6/dist-packages (from requests-oauthlib>=0.7.0->tweepy) (3.0.1)\n",
            "Requirement already satisfied: chardet<3.1.0,>=3.0.2 in /usr/local/lib/python3.6/dist-packages (from requests>=2.11.1->tweepy) (3.0.4)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.6/dist-packages (from requests>=2.11.1->tweepy) (2019.6.16)\n",
            "Requirement already satisfied: idna<2.9,>=2.5 in /usr/local/lib/python3.6/dist-packages (from requests>=2.11.1->tweepy) (2.8)\n",
            "Requirement already satisfied: urllib3<1.25,>=1.21.1 in /usr/local/lib/python3.6/dist-packages (from requests>=2.11.1->tweepy) (1.24.3)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "3KIJPWnKLV6-",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "import tweepy\n",
        "import matplotlib.pyplot as plt\n",
        "from textblob import TextBlob\n",
        "import time\n",
        "\n",
        "#all 4 authentication keys to access twitter API\n",
        "consumer_key='UwFy9bbIT51xobSjmBLL5JWfk'\n",
        "consumer_sec='lanaAB248Ap7Q15EFWvrCRnSY2VaDzZ5xzmkN8JXFrdDr7tPaL'\n",
        "\n",
        "#from proxy server we need to connect to web server of twitter\n",
        "access_token='1136442237624102914-cRAwcfstY1BxjVcN80RcZikKSBmkrH'\n",
        "access_sec='A80x5e21sauOAoYVE5u4eTUUx17G5zDUoioQQfDbFCI7V'\n",
        "\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Cxrfwa2VO2XI",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#tweepy explore\n",
        "#connecting to jump server of twitter\n",
        "auth=tweepy.OAuthHandler(consumer_key,consumer_sec)\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "UQFmPS2SSGib",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#now we can connect from jump server to web server of twitter\n",
        "auth.set_access_token(access_token,access_sec)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "LFr0qSvfPMpi",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#now we can connect to API storage server of twitter \n",
        "api_connect=tweepy.API(auth)\n",
        "\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "AC4qgQFMPhbi",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#now you can search any topic on twitter\n",
        "tweet_data=api_connect.search('Modi',count=10)\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "f41hWFsPP9e9",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 556
        },
        "outputId": "12ea1b09-ac3c-4b17-d399-12a765e89fc8"
      },
      "source": [
        "pos=0\n",
        "neg=0\n",
        "neu=0\n",
        "#printing line by line\n",
        "for tweet in tweet_data:\n",
        "  #print(tweet.text)\n",
        "  analysis=TextBlob(tweet.text)  #here it will apply NLP\n",
        " # print(analysis.sentiment())\n",
        "  #now checking polarity only\n",
        "  if analysis.sentiment.polarity > 0 :\n",
        "     print(\"positive\")\n",
        "     pos=pos+1\n",
        "  if analysis.sentiment.polarity == 0 :\n",
        "     print(\"neutral\")\n",
        "     neu=neu+1\n",
        "  else :\n",
        "     print(\"negative\")\n",
        "     neg=neg+1\n",
        "    \n",
        "#plotting graphs\n",
        "plt.xlabel(\"tags\")\n",
        "plt.ylabel(\"polarity\")\n",
        "plt.bar(['pos','neg','neu'],[pos,neg,neu])\n",
        "#plt.pie([pos,neg,neu],labels=['pos','neg','neu'],autopct)"
      ],
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "neutral\n",
            "positive\n",
            "negative\n",
            "neutral\n",
            "positive\n",
            "negative\n",
            "neutral\n",
            "positive\n",
            "negative\n",
            "neutral\n",
            "positive\n",
            "negative\n",
            "neutral\n",
            "neutral\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<BarContainer object of 3 artists>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 26
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4TZyVHJNXTws",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    }
  ]
}